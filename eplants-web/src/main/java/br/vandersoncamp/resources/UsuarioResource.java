package br.vandersoncamp.resources;import br.vandersoncamp.eplants.data.UsuarioBusiness;import br.vandersoncamp.eplants.model.Usuario;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.ws.rs.*;import javax.ws.rs.core.*;import java.util.HashMap;import java.util.List;import java.util.Map;@Path("/usuarios")@RequestScopedpublic class UsuarioResource {    @Context    private HttpHeaders headers;    @Context    private UriInfo uriInfo;    @Inject    private UsuarioBusiness business;    @GET    @Path("uri")    @Produces(MediaType.APPLICATION_JSON)    public Response pegarUriDetails() {        Map<String, String> dados = new HashMap<>();        dados.put("host", uriInfo.getBaseUri().getHost());        dados.put("path", uriInfo.getPath());        dados.put("paramTeste", uriInfo.getQueryParameters().get("teste").toString());        return Response.ok(dados).build();    }    @GET    @Path("header")    @Produces(MediaType.APPLICATION_JSON)    public Response pegarHttpHeaders() {        Map<String, String> dados = new HashMap<>();        dados.put("strHeader", headers.getHeaderString("testeheader"));        dados.put("headerInteiro", headers.toString());        return Response.ok(dados).build();    }    @GET    @Path("{id:[0-9][0-9]*}")    @Produces(MediaType.APPLICATION_JSON)    public Response buscar(@PathParam("id") Long id) {        Usuario usuario = business.buscar(id);        if (usuario == null) {            return Response.status(Response.Status.NOT_FOUND).build();        }        return Response.ok(usuario).build();    }    @GET    @Produces(MediaType.APPLICATION_JSON)    public Response pesquisar(@DefaultValue("0") @QueryParam("offset") Integer offset,                              @DefaultValue("50") @QueryParam("limit") int limit,                              @QueryParam("sort") String sort) {        List<Usuario> usuarios = business.pesquisar();        return Response.ok(usuarios).build();    }    @POST    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response criar(Usuario usuario) {        business.criar(usuario);        return Response.status(Response.Status.CREATED).entity(usuario).build();    }    @PUT    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response atualizar(Usuario usuario) {        business.atualizar(usuario);        return Response.status(Response.Status.CREATED).entity(usuario).build();    }    @DELETE    @Path("{id:[0-9][0-9]*}")    public Response excluir(@PathParam("id") Long id) {        business.excluir(id);        return Response.ok().build();    }}